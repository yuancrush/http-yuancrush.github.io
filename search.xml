<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2024/02/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/02/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="更多请参考正则表达式-–-语法-菜鸟教程-runoob-com"><a href="#更多请参考正则表达式-–-语法-菜鸟教程-runoob-com" class="headerlink" title="更多请参考正则表达式 – 语法 | 菜鸟教程 (runoob.com)"></a>更多请参考<a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式 – 语法 | 菜鸟教程 (runoob.com)</a></h2><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>[ABC]</strong></td><td align="left">匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。<img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/E691DDE1-E5CB-4EA8-8D16-759BD0D2B09D-170798332850911.jpg" alt="img"></td></tr><tr><td align="left"><strong>[^ABC]</strong></td><td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字符。<img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/ED971D92-30F4-4768-A2C7-02A84A3A9DEB-170798332850913.jpg" alt="img"></td></tr><tr><td align="left"><strong>[A-Z]</strong></td><td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/C5E357BD-65E3-4EB3-9D80-10D096F19287-170798332850915.jpg" alt="img"></td></tr><tr><td align="left"><strong>.</strong></td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。<img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/0FD7E77D-38A7-43BC-B51A-7DBA23A77756-170798332850917.jpg" alt="img"></td></tr><tr><td align="left"><strong>[\s\S]</strong></td><td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。<img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/47CA6C59-64CF-433A-909E-1E342349A4E0-170798332851019.jpg" alt="img"></td></tr><tr><td align="left"><strong>\w</strong></td><td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/F35A5971-3519-4CAE-8BEC-9DE8F4A55257-170798332851021.jpg" alt="img"></td></tr><tr><td align="left"><strong>\d</strong></td><td align="left">匹配任意一个阿拉伯数字（0 到 9）。等价于 <strong>[0-9]</strong><img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/20f5a98835b67f6159d11-170798332851023.png" alt="img"></td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th><th>举例</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。</td><td>例如，<strong>zo*</strong> 能匹配 <strong>“z”</strong> 以及 <strong>“zoo”<strong>。</strong></strong>* 等价于 **{0,}**。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。</td><td>例如，<strong>zo+</strong> 能匹配 <strong>“zo”</strong> 以及 “**zoo”**，但不能匹配 <strong>“z”<strong>。</strong>+</strong> 等价于</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。</td><td>例如，<strong>do(es)?</strong> 可以匹配 <strong>“do”</strong> 、 **”does”**、 <strong>“doxy”</strong> 中的 <strong>“do”</strong> 和 <strong>“does”<strong>。</strong>?</strong> 等价于 **{0,1}**。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 <strong>n</strong> 次。</td><td>例如，<strong>o{2}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但是能匹配 <strong>“food”</strong> 中的两个 <strong>o</strong>。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。</td><td>例如，<strong>o{2,}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但能匹配 <strong>“foooood”</strong> 中的所有 <strong>o</strong>。<strong>o{1,}</strong> 等价于 <strong>o+<strong>。</strong>o{0,}</strong> 则等价于 **o***。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中 n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。</td><td>例如，<strong>o{1,3}</strong> 将匹配 <strong>“fooooood”</strong> 中的前三个 <strong>o</strong>。<strong>o{0,1}</strong> 等价于 **o?**。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p><p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p><p><img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" alt="img"></p><p><img src="/../images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/82A7298A-2A94-49E3-AA27-A7778EE89711.jpg" alt="img"></p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p><p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?&#x3D;</strong> 和 **?!**，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> PA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PA1实验思路</title>
      <link href="/2024/02/07/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/02/07/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="PA1-RTFSC"><a href="#PA1-RTFSC" class="headerlink" title="PA1-RTFSC"></a>PA1-RTFSC</h2><h3 id="解决make-run报错"><a href="#解决make-run报错" class="headerlink" title="解决make run报错"></a>解决make run报错</h3><p><code>cd ics2023/nemu</code></p><p>在正常编译nemu，运行<code>make run</code>之后提示</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240206182324352.png" alt="image-20240206182324352"></p><p>可以看到提示说要求在 <code>monitor.c</code>的第36行删掉<code>Exercise: Please remove me in the source code and compile NEMU again.</code>，并且我们看到21行有一条断言终止了程序运行，那么想要让程序正常运行就要删掉&#x2F;注释掉这条断言</p><p>打开<code>./src/monitor/monitor.c</code></p><p>注释掉第35，36行</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240206182600117.png" alt="image-20240206182600117"></p><p>注释掉两行后，我们保存后直接<code>make clean &amp;&amp; make run</code></p><p>可以看到nemu已经正常运行。输入q，向下我们看到RTFSC要求我们解决退出报错的信息</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240206183238901.png" alt="image-20240206183238901"></p><p>即解决</p><p><code>make: *** [/home/myubuntu/ics2021/nemu/scripts/native.mk:23: run] Error 1</code>报错，我们先看看执行指令的时候都发生了什么。打开<code>./src/monitor/sdb/sdb.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_c</span><span class="params">(<span class="type">char</span> *args)</span> &#123;                                                                         </span><br><span class="line">  cpu_exec(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_q</span><span class="params">(<span class="type">char</span> *args)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>q命令直接返回-1，继续往下看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> &#123;</span>                                                                 </span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *description;</span><br><span class="line">  <span class="type">int</span> (*handler) (<span class="type">char</span> *);</span><br><span class="line">&#125; cmd_table [] = &#123;</span><br><span class="line">  &#123; <span class="string">&quot;help&quot;</span>, <span class="string">&quot;Display informations about all supported commands&quot;</span>, cmd_help &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;c&quot;</span>, <span class="string">&quot;Continue the execution of the program&quot;</span>, cmd_c &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;q&quot;</span>, <span class="string">&quot;Exit NEMU&quot;</span>, cmd_q &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* <span class="doctag">TODO:</span> Add more commands */</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里面定义了命令的结构体，有趣的是第三个成员变量<code>handler</code>在这里我们还不太清楚有什么用，继续往下看找到<code>void sdb_mainloop()</code>函数，也正是进入到了建议调试器的主循环当中，关键代码就在：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR_CMD; i ++) &#123;                                                                    </span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cmd, cmd_table[i].name) == <span class="number">0</span>) &#123; <span class="comment">//先判断指令表有无这个指令，有则向下</span></span><br><span class="line">   <span class="keyword">if</span> (cmd_table[i].handler(args) &lt; <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125; <span class="comment">//看看返回值是否小于0，如果小于0则返回到main函数内</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们可以看到输入<code>q</code>之后返回<code>-1</code>，<code>-1 &lt; 0</code>退回执行<code>main</code>里面的代码，我们追到main里面查看后续函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">engine_start();<span class="comment">//执行sdb_mainloop();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> is_exit_status_bad();</span><br></pre></td></tr></table></figure><p>看到最后是靠<code>is_exit_status_bad()</code>函数来判断是否正常退出，我们追进去<code>grep -n is_exit_status_bad $(find . -name &quot;*.c&quot;)</code></p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240206184348430.png" alt="image-20240206184348430"></p><p>我们打开<code>./src/utils/state.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> good = (nemu_state.state == NEMU_END &amp;&amp; nemu_state.halt_ret == <span class="number">0</span>) ||</span><br><span class="line">   (nemu_state.state == NEMU_QUIT);                                                                                        </span><br><span class="line"><span class="keyword">return</span> !good;</span><br></pre></td></tr></table></figure><p>就目前来说，大胆的猜测下<code>(nemu_state.state == NEMU_QUIT);</code>这句应该是单给q命令使用的，也就是说输入q命令后，nemu的状态要变成<code>NEMU_QUIT</code>才能让程序正常退出。我们回到<code>./src/monitor/sdb/sdb.c</code>给<code>cmd_q</code>加入<code>nemu_state.state = NEMU_QUIT</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_q</span><span class="params">(<span class="type">char</span> *args)</span> &#123;</span><br><span class="line">nemu_state.state = NEMU_QUIT;                                                                </span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再<code>make clean &amp;&amp; make run</code>测试一下</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240206183959684.png" alt="image-20240206183959684"></p><p>可以看到程序已经正常退出</p><h3 id="riscv64改为riscv32"><a href="#riscv64改为riscv32" class="headerlink" title="riscv64改为riscv32"></a>riscv64改为riscv32</h3><p><code>cd ics2023/nemu</code></p><p>输入<code>make menuconfig</code>，选择<code>ISA-dependent Options for riscv</code>,</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240207151758308.png" alt="image-20240207151758308"></p><p>输入<code>N</code>取消勾选<code>64-bit RISC-V architecture</code>,保存退出，修改成功。</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240207152109758.png" alt="image-20240207152109758"></p><h2 id="PA1-基础措施"><a href="#PA1-基础措施" class="headerlink" title="PA1-基础措施"></a>PA1-基础措施</h2><p>这节我们需要完成下面三个内容</p><table><thead><tr><th>单步执行</th><th><code>si [N]</code></th><th><code>si 10</code></th><th>让程序单步执行<code>N</code>条指令后暂停执行,当<code>N</code>没有给出时, 缺省为<code>1</code></th></tr></thead><tbody><tr><td><strong>打印程序状态</strong></td><td><strong><code>info SUBCMD</code></strong></td><td><strong><code>info r</code> <code>info w</code></strong></td><td><strong>打印寄存器状态 打印监视点信息</strong></td></tr><tr><td><strong>扫描内存</strong></td><td><strong><code>x N EXPR</code></strong></td><td><strong><code>x 10 $esp</code></strong></td><td><strong>求出表达式<code>EXPR</code>的值, 将结果作为起始内存 地址, 以十六进制形式输出连续的<code>N</code>个4字节</strong></td></tr></tbody></table><h3 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a><strong>单步执行</strong></h3><p>想要完成这个功能，实际上在上一小节已经给出了提示即</p><blockquote><p>在<code>cmd_c()</code>函数中, 调用<code>cpu_exec()</code>的时候传入了参数<code>-1</code>, 你知道这是什么意思吗?</p></blockquote><p>要想向后进行，就必须要理解这个题目，我们根据提示进入<code>./src/cpu/cpu-exec.c</code>中，映入眼帘的就看到开头注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The assembly code of instructions executed is only output to the screen</span></span><br><span class="line"><span class="comment"> * when the number of instructions executed is less than this value.</span></span><br><span class="line"><span class="comment"> * This is useful when you use the `si&#x27; command.</span></span><br><span class="line"><span class="comment"> * You can modify this value as you want.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>也就是说所执行的汇编代码输出到屏幕上，对后面使用<code>si</code>命令时候有用，只要执行步数小于<code>MAX_INSTR_TO_PRINT</code>就行，跳到<code>void cpu_exec(uint64_t n)</code>函数一探究竟</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cpu_exec</span><span class="params">(<span class="type">uint64_t</span> n)</span> &#123;</span><br><span class="line">........</span><br><span class="line">  <span class="keyword">for</span> (;n &gt; <span class="number">0</span>; n --) &#123;</span><br><span class="line">    fetch_decode_exec_updatepc(&amp;s);</span><br><span class="line">    g_nr_guest_instr ++;</span><br><span class="line">    trace_and_difftest(&amp;s, cpu.pc);</span><br><span class="line">    <span class="keyword">if</span> (nemu_state.state != NEMU_RUNNING) <span class="keyword">break</span>;                                               </span><br><span class="line">    IFDEF(CONFIG_DEVICE, device_update());</span><br><span class="line">  &#125;</span><br><span class="line">     ........</span><br></pre></td></tr></table></figure><p>当传入-1的时候，-1在无符号整型中的最大值也就是说这个for循环会一直不断的循环下去来不断调用<code>fetch_decode_exec_updatepc()</code>函数，换而言之也就是说给函数传入多少时候就会单步执行多少次，这样的话就可以在<code>./src/monitor/sdb/sdb.c</code>中编写<code>cmd_si</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_si</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">  <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(args == <span class="literal">NULL</span>)</span><br><span class="line">    step = <span class="number">1</span>;                                                                                   </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">   <span class="built_in">sscanf</span>(args,<span class="string">&quot;%d&quot;</span>,&amp;step);</span><br><span class="line"> cpu_exec(step);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要补充说明的是这里依据文档使用<code>sscanf()</code>函数，将字符串args改为int型</p><blockquote><p>sscanf()的使用 C 库函数 int sscanf(const char <em>str, const char</em> format, …) 从字符串读取格式化输入。 str – 这是 C 字符串，是函数检索数据的源。 format – 这是 C 字符串，包含了以下各项中的一个或多个：空格字符、非空格字符和format 说明符。</p></blockquote><p>然后在<code>cmd_table[]</code>数组中加入我们的命令：<code>&#123; &quot;si&quot;, &quot;run program&quot;, cmd_si&#125;,</code></p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240207164920453.png" alt="image-20240207164920453"></p><p>然后重新编译进行测试，单步运行已经正常</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240207164832384.png" alt="image-20240207164832384"></p><h3 id="打印程序状态"><a href="#打印程序状态" class="headerlink" title="打印程序状态"></a>打印程序状态</h3><p>参考：<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2021/nemu-isa-api.html">NEMU ISA相关API说明文档</a>提示，我们找到寄存器相关的信息，找到寄存器结构的类型定义，然后我们顺着找进去<code>./src/isa/riscv32/include/isa-def.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="type">word_t</span> gpr[MUXDEF(CONFIG_RVE, <span class="number">16</span>, <span class="number">32</span>)];</span><br><span class="line">  <span class="type">vaddr_t</span> pc;</span><br><span class="line">&#125; MUXDEF(CONFIG_RV64, riscv64_CPU_state, riscv32_CPU_state);</span><br></pre></td></tr></table></figure><p>可以发现在<code>reg.c</code>文件中定义了当前指令集的寄存器结构，同时在<code>isa-def</code>中可以找到<code>CPU_state</code>的定义，修改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="type">word_t</span> gpr[<span class="number">32</span>];       <span class="comment">// general purpose register;</span></span><br><span class="line">  <span class="type">vaddr_t</span> pc;</span><br><span class="line">&#125; riscv32_CPU_state;</span><br></pre></td></tr></table></figure><p> 在这里<code>gpr</code>的值就代表了寄存器对应的值，因此我们可以得出打印寄存器的值的函数如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">isa_reg_display</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>  ; i &lt; <span class="number">32</span> ; i ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;寄存器$%s --&gt; %d\n&quot;</span>,regs[i], cpu.gpr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 同时需要在<code>sdb.c</code>中定义<code>info r</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_info</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(args == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No args.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(args, <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        isa_reg_display();</span><br><span class="line">    <span class="comment">// else if(strcmp(args, &quot;w&quot;) == 0)</span></span><br><span class="line">    <span class="comment">//     sdb_watchpoint_display();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功！！</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240214185400121.png" alt="image-20240214185400121"></p><h3 id="扫描内存"><a href="#扫描内存" class="headerlink" title="扫描内存"></a>扫描内存</h3><p>这个目标，我们首先要根据实验手册找到管理内存的部分<code>./src/memory/paddr.c</code>，发现一个疑似可以使用的函数<code>paddr_read</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">word_t</span> <span class="title function_">paddr_read</span><span class="params">(<span class="type">paddr_t</span> addr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (likely(in_pmem(addr))) <span class="keyword">return</span> pmem_read(addr, len);                                               </span><br><span class="line">  MUXDEF(CONFIG_DEVICE, <span class="keyword">return</span> mmio_read(addr, len),</span><br><span class="line">    panic(<span class="string">&quot;address = &quot;</span> FMT_PADDR <span class="string">&quot; is out of bound of pmem [&quot;</span> FMT_PADDR <span class="string">&quot;, &quot;</span> FMT_PADDR <span class="string">&quot;) at pc = &quot;</span> FMT_WORD,</span><br><span class="line">      addr, CONFIG_MBASE, CONFIG_MBASE + CONFIG_MSIZE, cpu.pc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用这个函数去读内存，那么我们只要将addr和4传入<code>paddr_read</code>函数就可以得到，再用for循环len次，每次循环地址加4就可以实现内存的扫描，那么我们就可以在<code>./src/monitor/sdb/sdb.c</code>中写<code>cmd_x</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_x</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* n = strtok(args,<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="type">char</span>* baseaddr = strtok(<span class="literal">NULL</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">paddr_t</span> addr = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sscanf</span>(n, <span class="string">&quot;%d&quot;</span>, &amp;len);</span><br><span class="line">    <span class="built_in">sscanf</span>(baseaddr,<span class="string">&quot;%x&quot;</span>, &amp;addr);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,paddr_read(addr,<span class="number">4</span>));<span class="comment">//addr len</span></span><br><span class="line">        addr = addr + <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用函数<code>paddr_read</code>还需要引入头文件<code>include &lt;memory/paddr.h&gt;</code></p><h2 id="PA1-表达式求值"><a href="#PA1-表达式求值" class="headerlink" title="PA1-表达式求值"></a>PA1-表达式求值</h2><h3 id="词性分析"><a href="#词性分析" class="headerlink" title="词性分析"></a>词性分析</h3><p>首先，要在<code>./src/monitor/sdb/expr.c</code>文件的<code>rule</code>结构体中添加正则表达式，同时对于一些特定的类型写在<code>enum</code>里，记得引入头文件<code>#include &lt;memory/paddr.h&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  TK_NOTYPE = <span class="number">256</span>, TK_EQ,TK_NUM,TK_NEQ,TK_AND,</span><br><span class="line">  TK_HEX,TK_REG,TK_DEREF,</span><br><span class="line">  <span class="comment">/* <span class="doctag">TODO:</span> Add more token types */</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">rule</span> &#123;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *regex;</span><br><span class="line">  <span class="type">int</span> token_type;</span><br><span class="line">&#125; rules[] = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* <span class="doctag">TODO:</span> Add more rules.</span></span><br><span class="line"><span class="comment">   * Pay attention to the precedence level of different rules.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot; +&quot;</span>, TK_NOTYPE&#125;,    <span class="comment">// spaces</span></span><br><span class="line">  &#123;<span class="string">&quot;0x[0-9a-fA-F]+&quot;</span>,TK_HEX&#125;,  <span class="comment">// 十六进制</span></span><br><span class="line">  &#123;<span class="string">&quot;[0-9]+&quot;</span>, TK_NUM&#125;,   <span class="comment">// num</span></span><br><span class="line">  &#123;<span class="string">&quot;\\(&quot;</span>, <span class="string">&#x27;(&#x27;</span>&#125;,         <span class="comment">// 左括号</span></span><br><span class="line">  &#123;<span class="string">&quot;\\*&quot;</span>, <span class="string">&#x27;*&#x27;</span>&#125;,         <span class="comment">// 乘</span></span><br><span class="line">  &#123;<span class="string">&quot;\\/&quot;</span>, <span class="string">&#x27;/&#x27;</span>&#125;,         <span class="comment">// 除      </span></span><br><span class="line">  &#123;<span class="string">&quot;\\+&quot;</span>, <span class="string">&#x27;+&#x27;</span>&#125;,         <span class="comment">// 加</span></span><br><span class="line">  &#123;<span class="string">&quot;\\-&quot;</span>, <span class="string">&#x27;-&#x27;</span>&#125;,         <span class="comment">// 减</span></span><br><span class="line">  &#123;<span class="string">&quot;==&quot;</span>, TK_EQ&#125;,        <span class="comment">// 等于</span></span><br><span class="line">  &#123;<span class="string">&quot;\\)&quot;</span>, <span class="string">&#x27;)&#x27;</span>&#125;,         <span class="comment">// 右括号</span></span><br><span class="line">  &#123;<span class="string">&quot;!=&quot;</span>,TK_NEQ&#125;,        <span class="comment">// 不等于</span></span><br><span class="line">  &#123;<span class="string">&quot;&amp;&amp;&quot;</span>,TK_AND&#125;,        <span class="comment">// and</span></span><br><span class="line">  &#123;<span class="string">&quot;\\$[a-zA-Z0-9_]+&quot;</span>,TK_REG&#125; <span class="comment">// 寄存器</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再把原始字符串进行分割，逐个匹配我们自定义的<code>rules</code>规则，匹配成功之后，就进行处理。在我们的<code>tokens</code>数组之中加入我们匹配成功后的<code>token</code>，主要包括它的类型以及记录的值。修改<code>make_token()</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">make_token</span><span class="params">(<span class="type">char</span> *e)</span> &#123;</span><br><span class="line">  <span class="type">int</span> position = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">regmatch_t</span> pmatch;</span><br><span class="line"></span><br><span class="line">  nr_token = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (e[position] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">/* Try all rules one by one. */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR_REGEX; i ++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (regexec(&amp;re[i], e + position, <span class="number">1</span>, &amp;pmatch, <span class="number">0</span>) == <span class="number">0</span> &amp;&amp; pmatch.rm_so == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *substr_start = e + position;</span><br><span class="line">        <span class="type">int</span> substr_len = pmatch.rm_eo;</span><br><span class="line"></span><br><span class="line">        Log(<span class="string">&quot;match rules[%d] = \&quot;%s\&quot; at position %d with len %d: %.*s&quot;</span>,</span><br><span class="line">            i, rules[i].regex, position, substr_len, substr_len, substr_start);</span><br><span class="line"></span><br><span class="line">        position += substr_len;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Now a new token is recognized with rules[i]. Add codes</span></span><br><span class="line"><span class="comment">         * to record the token in the array `tokens&#x27;. For certain types</span></span><br><span class="line"><span class="comment">         * of tokens, some extra actions should be performed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (rules[i].token_type) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            tokens[nr_token].type = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            tokens[nr_token].type = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            tokens[nr_token].type = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            tokens[nr_token].type = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            tokens[nr_token].type = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            tokens[nr_token].type = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> TK_EQ:</span><br><span class="line">            tokens[nr_token].type = TK_EQ;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> TK_NEQ:</span><br><span class="line">            tokens[nr_token].type = TK_NEQ;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">          <span class="keyword">case</span> TK_AND:</span><br><span class="line">            tokens[nr_token].type = TK_AND;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">          <span class="keyword">case</span> TK_HEX:</span><br><span class="line">            tokens[nr_token].type = TK_HEX;</span><br><span class="line">            <span class="built_in">strncpy</span>(tokens[nr_token].str, substr_start+<span class="number">2</span>, substr_len<span class="number">-2</span>);</span><br><span class="line">            tokens[nr_token].str[substr_len<span class="number">-2</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">          <span class="keyword">case</span> TK_REG:</span><br><span class="line">            tokens[nr_token].type = TK_REG;</span><br><span class="line">            <span class="built_in">strncpy</span>(tokens[nr_token].str, substr_start+<span class="number">1</span>, substr_len<span class="number">-1</span>);</span><br><span class="line">            tokens[nr_token].str[substr_len<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">          <span class="keyword">case</span> TK_DEREF:</span><br><span class="line">            tokens[nr_token].type = TK_DEREF;</span><br><span class="line">            <span class="built_in">strncpy</span>(tokens[nr_token].str, substr_start+<span class="number">1</span>, substr_len<span class="number">-1</span>);</span><br><span class="line">            tokens[nr_token].str[substr_len<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">          <span class="keyword">case</span> TK_NUM:</span><br><span class="line">            tokens[nr_token].type = TK_NUM;</span><br><span class="line">            <span class="built_in">strncpy</span>(tokens[nr_token].str, substr_start, substr_len);</span><br><span class="line">            tokens[nr_token].str[substr_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            nr_token++;</span><br><span class="line">          <span class="keyword">default</span>: ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == NR_REGEX) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;no match at position %d\n%s\n%*.s^\n&quot;</span>, position, e, position, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归求值"><a href="#递归求值" class="headerlink" title="递归求值"></a>递归求值</h3><p><code>eval</code>是一个递归函数，用来求值，在条件判断时我们可以发现如果p&gt;q代表代码出现了错误，直接报错即可；当p&#x3D;&#x3D;q的时候代表我们需要取出其中的值，因此我们可以使用<code>atoi</code>函数直接将字符数组转为int即可；当p,q通过括号校验的时候，我们直接递归处理括号里面的部分即可；最后就是进入了计算过程，在这里我们需要<strong>根据运算符的优先级得出主运算符的位置</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">eval</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p &gt; q)&#123;</span><br><span class="line">    assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (p == q)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tokens[p].type == TK_NUM)&#123;</span><br><span class="line">      <span class="keyword">return</span> atoi(tokens[p].str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tokens[p].type == TK_HEX)&#123;</span><br><span class="line">      <span class="type">int</span> num;</span><br><span class="line">      <span class="built_in">sscanf</span>(tokens[p].str,<span class="string">&quot;%x&quot;</span>,&amp;num);</span><br><span class="line">      <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tokens[p].type == TK_REG)&#123;</span><br><span class="line">      <span class="type">bool</span> success = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="type">int</span> res = isa_reg_str2val(tokens[p].str,&amp;success);  <span class="comment">// word_t -&gt; int</span></span><br><span class="line">      <span class="keyword">if</span>(success)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        assert(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (check_parentheses(p,q) == <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> eval(p + <span class="number">1</span>, q - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(tokens[p].type == TK_DEREF)&#123;</span><br><span class="line">    <span class="type">int</span> addr  = eval(p+<span class="number">1</span>,q);</span><br><span class="line">    <span class="type">uint32_t</span> val = paddr_read(addr,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">int</span> op = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> is_in = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = p; i &lt;= q; i ++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">        is_in++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">        is_in--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ((tokens[i].type == <span class="string">&#x27;+&#x27;</span> || tokens[i].type == <span class="string">&#x27;-&#x27;</span> || tokens[i].type == <span class="string">&#x27;*&#x27;</span> || tokens[i].type == <span class="string">&#x27;/&#x27;</span>)&amp;&amp;is_in==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>)&#123;</span><br><span class="line">          op = i;     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;*&#x27;</span> || tokens[i].type == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tokens[op].type == <span class="string">&#x27;*&#x27;</span> || tokens[op].type == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                op = i;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// &quot;+&quot;和&quot;-&quot;优先级最低 </span></span><br><span class="line">            <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;+&#x27;</span> || tokens[i].type == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">              op  = i;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Log(<span class="string">&quot;The op is %c&quot;</span>,tokens[op].type);</span><br><span class="line">    <span class="keyword">if</span>(!(tokens[op].type == <span class="string">&#x27;+&#x27;</span> || tokens[op].type == <span class="string">&#x27;-&#x27;</span> || tokens[op].type == <span class="string">&#x27;*&#x27;</span> || tokens[op].type == <span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">      assert(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    assert(op<span class="number">-1</span>&gt;=p);</span><br><span class="line">    assert(op+<span class="number">1</span>&lt;=q);</span><br><span class="line">    <span class="type">int</span> val1 = eval(p, op - <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> val2 = eval(op + <span class="number">1</span>, q);</span><br><span class="line">    <span class="keyword">switch</span> (tokens[op].type)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span> : <span class="keyword">return</span> val1 + val2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span> : <span class="keyword">return</span> val1 - val2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span> : <span class="keyword">return</span> val1 * val2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span> : <span class="keyword">return</span> val1 / val2;</span><br><span class="line">      <span class="keyword">default</span>: assert(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>check_parentheses()</code>函数用于判断表达式是否被一对匹配的括号包围着, 同时检查表达式的左右括号是否匹配。手册中举了一些例子来说明<code>check_parentheses()</code>函数的功能:</p><blockquote><p>“(2 - 1)”             &#x2F;&#x2F; true<br>“(4 + 3 * (2 - 1))”   &#x2F;&#x2F; true<br>“4 + 3 * (2 - 1)”     &#x2F;&#x2F; false, the whole expression is not surrounded by a matched<br>                      &#x2F;&#x2F; pair of parentheses<br>“(4 + 3)) * ((2 - 1)” &#x2F;&#x2F; false, bad expression<br>“(4 + 3) * (2 - 1)”   &#x2F;&#x2F; false, the leftmost ‘(‘ and the rightmost ‘)’ are not matched</p></blockquote><p>当成一个程序设计的作业，这里直接给出代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">check_parentheses</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==q)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (tokens[p].type == <span class="string">&#x27;(&#x27;</span> &amp;&amp; tokens[q].type == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p+<span class="number">1</span>; i &lt;= q<span class="number">-1</span>; i ++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">        left ++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">        right ++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( left != right)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在完成词法分析以及递归求值功能之后，在<code>./src/monitor/sdb/sdb.c</code>中加入指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_p</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">  <span class="type">bool</span> success;</span><br><span class="line">  <span class="type">char</span> *arg = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(arg != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="type">uint32_t</span> val = expr(arg,&amp;success);</span><br><span class="line">    <span class="keyword">if</span>(success == <span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      assert(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何测试代码"><a href="#如何测试代码" class="headerlink" title="如何测试代码"></a>如何测试代码</h3><p>在<code>nemu/tools/gen-expr/gen-expr.c</code>,实现<code>void gen_rand_expr()</code>函数, 将随机生成的表达式输出到缓冲区<code>buf</code>中.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">gen_expr</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">switch</span>(choose(<span class="number">3</span>))&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: res =  gen_num(); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: gen(<span class="string">&#x27;(&#x27;</span>); res = gen_expr(); gen(<span class="string">&#x27;)&#x27;</span>);  <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> value1,value2;</span><br><span class="line">      <span class="type">char</span> op;</span><br><span class="line">      <span class="type">int</span> len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">      op = buf[len<span class="number">-1</span>];</span><br><span class="line">      <span class="keyword">while</span>((op!=<span class="string">&#x27;+&#x27;</span>&amp;&amp;op!=<span class="string">&#x27;-&#x27;</span>&amp;&amp;op!=<span class="string">&#x27;*&#x27;</span>&amp;&amp;op!=<span class="string">&#x27;/&#x27;</span>)&amp;&amp; len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        len--;</span><br><span class="line">        op = buf[len<span class="number">-1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      value1 = gen_expr(); </span><br><span class="line">      <span class="keyword">if</span>(op==<span class="string">&#x27;/&#x27;</span> &amp;&amp; value1 == <span class="number">0</span>)&#123;</span><br><span class="line">        buf[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> UINT16_MAX;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(value1 == UINT16_MAX)&#123;</span><br><span class="line">        buf[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> UINT16_MAX;</span><br><span class="line">      &#125;</span><br><span class="line">      op =  gen_rand_op(); </span><br><span class="line">      value2 = gen_expr();</span><br><span class="line">      <span class="keyword">if</span>(value2 == UINT16_MAX)&#123;</span><br><span class="line">        buf[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> UINT16_MAX;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span> (op)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span> : <span class="keyword">return</span> value1 + value2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span> : <span class="keyword">return</span> value1 - value2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span> : <span class="keyword">return</span> value1 * value2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span> :  &#123;</span><br><span class="line">        <span class="keyword">if</span>(value2 != <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> value1 / value2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// division by zero</span></span><br><span class="line">        buf[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> UINT16_MAX;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>: assert(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(res == UINT16_MAX)&#123;</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">gen_rand_expr</span><span class="params">()</span> &#123;</span><br><span class="line">  buf[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  gen_expr();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>./src/monitor/sdb/sdb.c</code>中加入测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test_expr</span><span class="params">()</span>&#123;</span><br><span class="line">  FILE *fp = fopen(<span class="string">&quot;/home/ics2023/nemu/tools/gen-expr/build/input&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">char</span> line[<span class="number">65535</span>];</span><br><span class="line">    <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), fp)) &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 每行的格式是 &quot;&lt;result&gt; &lt;expression&gt;&quot;</span></span><br><span class="line">        <span class="type">unsigned</span> result;</span><br><span class="line">        <span class="type">char</span> expression[<span class="number">65535</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;%u %[^\n]&quot;</span>, &amp;result, expression) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">bool</span> success;</span><br><span class="line">            <span class="type">unsigned</span> val = expr(expression,&amp;success);</span><br><span class="line">            <span class="keyword">if</span>(success)&#123;</span><br><span class="line">              Log(<span class="string">&quot;result is %u\n&quot;</span>,val);</span><br><span class="line">              assert(val==result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式求值基本功能实现！</p><p><img src="/../images/PA1%E5%AE%9E%E9%AA%8C%E6%80%9D%E8%B7%AF/image-20240215192618482.png" alt="image-20240215192618482"></p><h2 id="PA1-监视点"><a href="#PA1-监视点" class="headerlink" title="PA1-监视点"></a>PA1-监视点</h2><p>先对监视点的结构体进行补充，在<code>./src/monitor/sdb/sdb.h</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">watchpoint</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> NO;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">watchpoint</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> str[<span class="number">32</span>];</span><br><span class="line">  <span class="type">uint32_t</span> val;</span><br><span class="line">&#125; WP;</span><br></pre></td></tr></table></figure><p>之后就来实现<code>./src/monitor/sdb/watchpoint.c</code>中<code>new_wp()</code>和<code>free_wp(WP *wp)</code>函数，分别代表获取一个空闲节点和释放节点，参考代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">WP* <span class="title function_">new_wp</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// the free list is empty</span></span><br><span class="line">  <span class="keyword">if</span>(free_ == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// get the first free node</span></span><br><span class="line">  WP* node = free_;</span><br><span class="line">  free_ = free_-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_wp</span><span class="params">(WP* wp)</span>&#123;</span><br><span class="line">  <span class="comment">// free is empty</span></span><br><span class="line">  <span class="keyword">if</span>(free_ == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    free_ = wp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    wp-&gt;next = free_;</span><br><span class="line">    free_ = wp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// delete the wp from head list</span></span><br><span class="line">  <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>( wp-&gt;NO == head-&gt;NO)&#123;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    WP* prev = head;</span><br><span class="line">    WP* current = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(current != <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(current-&gt;NO == wp-&gt;NO)&#123;</span><br><span class="line">        prev-&gt;next = current-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">      prev = current;</span><br><span class="line">      current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 到这里我们就实现了基本函数，接下来就是监视器相关的代码，主要的增删查监视点代码如下： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WP* <span class="title function_">get_head</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_head</span><span class="params">(WP* node)</span>&#123;</span><br><span class="line">  node-&gt;next = head;</span><br><span class="line">  head = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>./src/monitor/sdb/sdb.c</code>中加入指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_w</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">  <span class="type">char</span> *arg = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(arg != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    WP* node = new_wp();</span><br><span class="line">    <span class="built_in">memcpy</span>(node-&gt;str,arg,<span class="built_in">strlen</span>(arg)+<span class="number">1</span>);</span><br><span class="line">    <span class="type">bool</span> success;</span><br><span class="line">    <span class="type">uint32_t</span> val = expr(arg,&amp;success);</span><br><span class="line">    <span class="keyword">if</span>(success == <span class="literal">true</span>)&#123;</span><br><span class="line">      node-&gt;val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      assert(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hardware watchpoint %d: %s\n&quot;</span>,node-&gt;NO,arg);</span><br><span class="line">    add_head(node);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_d</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">  <span class="type">char</span> *arg = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(arg != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    WP* node = get_head();</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(node-&gt;NO == atoi(arg))&#123;</span><br><span class="line">        free_wp(node);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 为了每次在<code>CPU</code>运行一次之后都进行一次检查，这里我们在<code>src/cpu/cpu-exec.c</code>中的<code>trace_and_difftest</code>函数中进行修改，参考代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">trace_and_difftest</span><span class="params">(Decode *_this, <span class="type">vaddr_t</span> dnpc)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_ITRACE_COND</span></span><br><span class="line">  <span class="keyword">if</span> (ITRACE_COND) &#123; log_write(<span class="string">&quot;%s\n&quot;</span>, _this-&gt;logbuf); &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(iringbuf[buf_index], _this-&gt;logbuf); buf_index = (buf_index+<span class="number">1</span>)%<span class="number">16</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (g_print_step) &#123; IFDEF(CONFIG_ITRACE, <span class="built_in">puts</span>(_this-&gt;logbuf)); &#125;</span><br><span class="line">  IFDEF(CONFIG_DIFFTEST, difftest_step(_this-&gt;pc, dnpc));</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_WATCHPOINT</span></span><br><span class="line">  <span class="type">bool</span> success;</span><br><span class="line">  WP* node = get_head();</span><br><span class="line">  <span class="keyword">while</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="type">uint32_t</span> val = expr(node-&gt;str,&amp;success);</span><br><span class="line">    <span class="keyword">if</span>(val != node-&gt;val)&#123;</span><br><span class="line">      nemu_state.state=NEMU_STOP;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;The user triggered a watch point, the changed value is %u\n&quot;</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    node = node-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得引入头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;/home/yuan/ics2023/nemu/src/monitor/sdb/sdb.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>以及加入这些定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> iringbuf[<span class="number">16</span>][<span class="number">128</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> buf_index = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> PA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu22.04上git-clone</title>
      <link href="/2024/01/24/%E5%9C%A8ubuntu22-04%E4%B8%8Agit-clone/"/>
      <url>/2024/01/24/%E5%9C%A8ubuntu22-04%E4%B8%8Agit-clone/</url>
      
        <content type="html"><![CDATA[<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ol><li>查看是否安装git：<code>git --version</code></li><li>安装git：<code>sudo apt install git</code></li></ol><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>用github上注册的用户名和邮箱地址，配置git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config  --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config  --global user.email <span class="string">&quot;username@email.com&quot;</span></span><br></pre></td></tr></table></figure><p>重启ubuntu</p><p>查看git是否配置成功：<code>sudo git config --global --list</code></p><p>报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: 无法读取配置文件 <span class="string">&#x27;/root/.gitconfig&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p><strong>手动创建配置文件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /root/.gitconfig</span><br></pre></td></tr></table></figure><p>然后，将以下内容粘贴到文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = Your Name</span><br><span class="line">    email = username@email.com</span><br></pre></td></tr></table></figure><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>生成ssh密钥，ed25519也可以用rsa，只是代表两种不同算法生成的密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;username@email.com&quot;</span></span><br></pre></td></tr></table></figure><p>response如下，设置私钥的文件名（产生一个私钥，和一个同名的.pub结尾公钥）和通行短语。三步都可以回车跳过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/icenter/.ssh/id_ed25519): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>使用cat命令查看生成的pub密钥，xxx是用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /home/xxx/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure><h2 id="在gitHub上添加密钥"><a href="#在gitHub上添加密钥" class="headerlink" title="在gitHub上添加密钥"></a>在gitHub上添加密钥</h2><ol><li>进入个人setting</li><li>点击SHH and GPG keys</li><li>点击new SSH key</li><li>将cat命令查看生成的pub密钥粘贴在key中，取个Title</li></ol><p><img src="/../images/%E5%9C%A8ubuntu22-04%E4%B8%8Agit-clone/image-20240125133339282.png" alt="image-20240125133339282"></p><h2 id="克隆失败"><a href="#克隆失败" class="headerlink" title="克隆失败"></a>克隆失败</h2><p>输入克隆命令<code>get clone -b 2023 git@github.com:NJU-ProjectN/ics-pa.git ics2023</code>，出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cloning into <span class="string">&#x27;ics2023&#x27;</span>... </span><br><span class="line">ssh:connect to host github.com port 22: Connection refused fatal: </span><br><span class="line">Could not <span class="built_in">read</span> from remote repository. </span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure><ol><li><p><strong>在远程主机上执行命令：</strong> 连接成功后，你可以在远程主机上执行一些命令来确认连接。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com <span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>如果连接成功，将显示远程主机上的用户名。</p><p><img src="/../images/%E5%9C%A8ubuntu22-04%E4%B8%8Agit-clone/image-20240125135012619.png" alt="image-20240125135012619"></p></li><li><p><strong>使用SSH调试模式：</strong> 你可以通过在SSH命令中添加<code>-v</code>或<code>-vv</code>选项启用调试模式，以获取更详细的连接信息。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>解决办法：</p><p><strong>更改SSH端口：</strong> 如果知道GitHub账户使用的是非标准SSH端口，可以尝试通过更改SSH端口进行连接。</p><p>输入指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano .ssh/config</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    Port 443</span><br></pre></td></tr></table></figure><p>问题解决!</p><p><img src="/../images/%E5%9C%A8ubuntu22-04%E4%B8%8Agit-clone/image-20240125140114604.png" alt="image-20240125140114604"></p>]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> PA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ubuntu22.04一些install tools安装过程中过高版本包依赖问题</title>
      <link href="/2024/01/20/%E8%A7%A3%E5%86%B3ubuntu22-04%E4%B8%80%E4%BA%9Binstall-tools%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%AC%E5%8C%85%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"/>
      <url>/2024/01/20/%E8%A7%A3%E5%86%B3ubuntu22-04%E4%B8%80%E4%BA%9Binstall-tools%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%AC%E5%8C%85%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>初步分析可能在安装系统时用了Software Updater或者自己手动upgrade了包，导致在配置编译工具<code>build-essential</code>(输入<code>sudo apt install build-essential</code>)时出现如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">Some packages could not be installed. This may mean that you have</span><br><span class="line">requested an impossible situation or if you are using the unstable</span><br><span class="line">distribution that some required packages have not yet been created</span><br><span class="line">or been moved out of Incoming.</span><br><span class="line">The following information may help to resolve the situation:</span><br><span class="line"></span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> libc6-dev : Depends: libc6 (= 2.35-0ubuntu3) but 2.35-0ubuntu3.1 is to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>分析报错信息，得知包libc6的版本过高。网上查到的很多关于依赖问题的解决方法是换源，但是换源很可能不能解决问题，比如我尝试了从ustc到aliyun。那么考虑降级操作。考虑到libc6可能有小白不明确的复杂依赖关系，小白就不敢直接sudo apt install libc6&#x3D;2.35-0ubuntu3 ，这里就用包管理工具aptitude来帮助处理依赖关系</p><ol><li>安装 aptitude ：<code>sudo apt install aptitude</code></li><li>利用 aptitude 来安装 build-essential ：<code>sudo aptitude install build-essential</code></li></ol><p>运行命令后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">The following NEW packages will be installed:</span><br><span class="line">  binutils&#123;a&#125; binutils-common&#123;a&#125; binutils-x86-64-linux-gnu&#123;a&#125; </span><br><span class="line">  build-essential&#123;b&#125; dpkg-dev&#123;a&#125; fakeroot&#123;a&#125; gcc&#123;a&#125; gcc-11&#123;a&#125; </span><br><span class="line">  libalgorithm-diff-perl&#123;a&#125; libalgorithm-diff-xs-perl&#123;a&#125; </span><br><span class="line">  libalgorithm-merge-perl&#123;a&#125; libasan6&#123;a&#125; libbinutils&#123;a&#125; libcc1-0&#123;a&#125; </span><br><span class="line">  libctf-nobfd0&#123;a&#125; libctf0&#123;a&#125; libfakeroot&#123;a&#125; libgcc-11-dev&#123;a&#125; libitm1&#123;a&#125; </span><br><span class="line">  liblsan0&#123;a&#125; libquadmath0&#123;a&#125; libtsan0&#123;a&#125; libubsan1&#123;a&#125; lto-disabled-list&#123;a&#125; </span><br><span class="line">  make&#123;a&#125; </span><br><span class="line">The following packages will be REMOVED:</span><br><span class="line">  systemd-hwe-hwdb&#123;u&#125; </span><br><span class="line">0 packages upgraded, 25 newly installed, 1 to remove and 0 not upgraded.</span><br><span class="line">Need to get 34.1 MB of archives. After unpacking 108 MB will be used.</span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> build-essential : Depends: libc6-dev but it is not installable or</span><br><span class="line">                            libc-dev which is a virtual package, provided by:</span><br><span class="line"></span><br><span class="line">   - libc6-dev (2.35-0ubuntu3), but it is not installable</span><br><span class="line"></span><br><span class="line">                   Depends: g++ (&gt;= 4:10.2) but it is not installable</span><br><span class="line"></span><br><span class="line">The following actions will resolve these dependencies:</span><br><span class="line"></span><br><span class="line">     Keep the following packages at their current version:</span><br><span class="line"></span><br><span class="line">1. build-essential [Not Installed]                    </span><br><span class="line"></span><br><span class="line">   Leave the following dependencies unresolved:         </span><br><span class="line"></span><br><span class="line">2. dpkg-dev recommends build-essential                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Accept this solution? [Y/n/q/?] </span><br></pre></td></tr></table></figure><p>显然此时方案并不是我们想要的，输入<code>n</code>来获得其方案。</p><p>此时给出了降级方案，选择<code>y</code>来接受。</p><p>最后我们再次运行<code>sudo apt install build-essential</code>检查，包已经安装完成了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">build-essential is already the newest version (12.9ubuntu3).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 2 not upgraded.</span><br></pre></td></tr></table></figure><p>apt-get install git            </p><p>apt-get install libreadline-dev    </p><p>apt-get install libsdl2-dev     </p><p>apt-get install llvm llvm-dev    </p><p>apt-get install llvm-11 llvm-11-dev 等intsall-tools也可以用此办法解决</p>]]></content>
      
      
      <categories>
          
          <category> PA </category>
          
          <category> 报错解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> PA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda+Pytorch（GPU）环境配置</title>
      <link href="/2023/05/01/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/05/01/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h1><h2 id="卸载Anaconda（可选"><a href="#卸载Anaconda（可选" class="headerlink" title="卸载Anaconda（可选"></a>卸载Anaconda（可选</h2><p>下载 Everything 小工具（一个 2M 左右无需安装的 exe 文件），Everything 可以根据文件名，秒搜计算机中任何位置的任何文件，启动后进入状态需要等待约 20 秒，在 Everything 中搜索“Uninstall-Anaconda”，双击启动<br>卸载Anaconda后，用Everything.exe查找并删除残存在C盘里关于.condarc、jupyter、ipython、continuum、matplotlib、anaconda 以及 conda 的文件</p><h2 id="下载Anaconda"><a href="#下载Anaconda" class="headerlink" title="下载Anaconda"></a>下载Anaconda</h2><p>镜像源<a href="https://mirrors.bfsu.edu.cn/anaconda/archive/">https://mirrors.bfsu.edu.cn/anaconda/archive/</a> 下载的是<strong>2022.10-win</strong>版本，其基础环境（base）下的python为3.9版本</p><p><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20230909202005860.png" alt="image-20230909202005860"></p><h2 id="安装Annaconda"><a href="#安装Annaconda" class="headerlink" title="安装Annaconda"></a>安装Annaconda</h2><ul><li>Just me 和 All Users，选择 Just me</li><li>修改合适的安装路径，新建【D:\Anaconda】<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-01_15-10-52.png" alt="Snipaste_2023-09-01_15-10-52"></li><li>Advanced Options不勾选第一个方框<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-01_15-17-13.png" alt="Snipaste_2023-09-01_15-17-13"></li></ul><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol><li>桌面右击打开显示设置</li><li>左上角“查找设置”中输入“环境变量”，点击“编辑系统环境变量”</li><li>在弹出的“系统属性”窗口中点击“环境变量”，再在弹出的“环境变量”窗口中选中<strong>Path</strong>路径，并点击编辑<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-01_15-25-55.png" alt="Snipaste_2023-09-01_15-25-55"></li><li>通过右侧的“新建”按钮，可新建环境变量的路径，将【D:\Anacond】【D:\Anaconda\Scripts】与【D:\Anaconda\Library\bin】添加到环境变量<ul><li>若 Anaconda 安装路径不是 D:\Anaconda，而是 E:\Anaconda，以上三个环境变量对应地进行更改为【E:\Anaconda】、【E:\Anaconda\Scripts】与【E:\Anaconda\Library\bin】</li><li>若此前为其它单独的 Python 解释器添加过环境变量，请在删除它的环境变量，否则 Anaconda 的环境变量会被挤出来（即点击确定后，再点进来会自动消失）<br> <img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-52-13.png" alt="Snipaste_2023-09-02_15-52-13"></li></ul></li></ol><h2 id="添加桌面快捷方式"><a href="#添加桌面快捷方式" class="headerlink" title="添加桌面快捷方式"></a>添加桌面快捷方式</h2><p>桌面底部搜索“jupyter”，打开文件所在位置，把 Jupyter 和 Prompt 快捷方式复制到桌面</p><h1 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h1><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>(1)清屏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清屏</span></span><br><span class="line">cls</span><br></pre></td></tr></table></figure><p>(2)base环境下操作    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有的环境</span></span><br><span class="line">conda env <span class="built_in">list</span></span><br><span class="line"><span class="comment"># 创建名为“环境名”的虚拟环境，并指定 Python 的版本</span></span><br><span class="line">conda create -n 环境名 python=<span class="number">3.9</span> </span><br><span class="line"><span class="comment"># 创建名为“环境名”的虚拟环境，并指定 Python 的版本与安装路径</span></span><br><span class="line">conda create --prefix=安装路径\环境名 python=<span class="number">3.9</span> </span><br><span class="line"><span class="comment"># 删除名为“环境名”的虚拟环境</span></span><br><span class="line">conda remove -n 环境名 --<span class="built_in">all</span></span><br><span class="line"><span class="comment"># 进入名为“环境名”的虚拟环境</span></span><br><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>(3)虚拟环境内操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前环境下的所有库</span></span><br><span class="line">conda <span class="built_in">list</span></span><br><span class="line"><span class="comment"># 安装 NumPy 库，并指定版本 1.21.5</span></span><br><span class="line">pip install numpy==<span class="number">1.21</span><span class="number">.5</span> -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 安装 Pandas 库，并指定版本 1.2.4</span></span><br><span class="line">pip install Pandas==<span class="number">1.2</span><span class="number">.4</span> -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 安装 Matplotlib 库，并指定版本 3.5.1</span></span><br><span class="line">pip install Matplotlib==<span class="number">3.5</span><span class="number">.1</span> -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 查看当前环境下某个库的版本（以 numpy 为例）</span></span><br><span class="line">pip show numpy</span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>创建虚拟环境并进入，安装Numpy Pandas 和Matplotlib 库</p><h2 id="检查GPU"><a href="#检查GPU" class="headerlink" title="检查GPU"></a>检查GPU</h2><p>查看CUDA版本的方法Win+R 后输入 cmd，进入命令提示符，输入 <code>nvcc -V</code><br>为了区分，显卡内的 CUDA 用大写，PyTorch 内置的 cuda 用小写。一般来讲，要满足：<strong>CUDA 版本≥cuda 版本<img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-01_16-45-21-16942622109291.png" alt="Snipaste_2023-09-01_16-45-21"></strong></p><p>后面将安装 <strong>torch 1.12.0</strong> 版本，其可选的内置 cuda 版本是 11.3。因此，如果您显卡里的 CUDA 低于了 11.3，需要进行升级</p><h2 id="安装CUDA（可选"><a href="#安装CUDA（可选" class="headerlink" title="安装CUDA（可选"></a>安装CUDA（可选</h2><p>CUDA 的下载链接：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a>以其中的 CUDA 11.3 为例<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-20-06.png" alt="Snipaste_2023-09-02_16-20-06"><br>接下来要选择平台，点击 Windows，之后自动弹出更多内容，按下图选择，最后点击右下角的 Download（2.7GB），建议将其放置新建的 D:\CUDA 中</p><p><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-21-03.png" alt="Snipaste_2023-09-02_16-21-03"></p><p>下载好之后，将 exe 文件放置在新建的 D:\CUDA 内，点击 exe 文件，大约要等两分钟，会弹出如图 5-5 的提示框，这里要选择临时的解压文件夹，考虑到解压后需要占用大约 7G 的内存，因此建议放在 D:\CUDA\Tem 内，安装结束后，该临时解压文件夹会自动删除<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-22-11.png" alt="Snipaste_2023-09-02_16-22-11"><br>解压好后进入安装页面，同意并继续后点击自定义<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-23-43.png" alt="Snipaste_2023-09-02_16-23-43"><br>接下来，仅仅选择 4 大项中的 CUDA，并取消 CUDA 中关于 VS 的选项<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-24-58.png" alt="Snipaste_2023-09-02_16-24-58"><br>完成后，按照默认的 C 盘路径进行安装（大约 7G）即可<br>配置环境变量(参考Anaconda环境变量配置)，如果是按照默认路径的话，其路径应该是</p><ul><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\lib\x64</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\libnvvp</li></ul><h2 id="安装Pytorch-1"><a href="#安装Pytorch-1" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h2><p>PyTorch 分为：torch、torchvision 与 torchaudio。这三个库中，torch 有2G 左右，而 torchvision 和 torchaudio 只有 2M 左右，因此一般在代码里只会import torch。当 torch 的版本给定后，另外两个附件的版本也唯一确定了<br>下图给出torch版本可选的cuda版本和支持的python版本，注：NVIDIA 显卡 30 系列（如 NVIDIA GeForce RTX 3050）只能安装 cu110 及其以后的版本<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_13-09-52.png" alt="Snipaste_2023-09-02_13-09-52"><br>进入 PyTorch 官网<a href="https://pytorch.org/get-started/previous-versions/">https://pytorch.org/get-started/previous-versions/</a>，在其中Ctrl + F 搜索【 pip install torch&#x3D;&#x3D;1.12.0 】<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_13-54-47.png" alt="Snipaste_2023-09-02_13-54-47"><br>方法一：直接安装<br>复制网页里的那段代码<code>pip install torch==1.12.0+cu113 torchvision==0.13.0+cu113 torchaudio==0.12.0 --extra-index-url https://download.pytorch.org/whl/cu113</code><br>双击 Prompt，进入 DL 环境下运行,看到最后几行代码里有 Successfully installed 就算成功<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_13-58-08.png" alt="Snipaste_2023-09-02_13-58-08"><br>方法二：轮子法<br>首先，进入方法一提及的网站<a href="https://download.pytorch.org/whl/cu113">https://download.pytorch.org/whl/cu113</a>,进入 torch、torchvision、torchaudio 三大组件各自的网站<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-50-05.png" alt="Snipaste_2023-09-02_15-50-05"><br>在这三个组件各自的网站里 Ctrl + F 搜索 <code>torch==1.12.0+cu113</code>，<code>torchvision==0.13.0+cu113</code>和 <code>torchaudio==0.12.0</code></p><p><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_14-02-11.png" alt="Snipaste_2023-09-02_14-02-11"></p><p>下载好后，将三个 whl 文件放在新建的 D:\whl 文件夹中。安装命令为 pip install 路径\轮子名.whl<br><code>pip install D:\whl\torch-1.12.0+cu113-cp39-cp39-win_amd64.whl</code><br><code>pip install D:\whl\torchvision-0.13.0+cu113-cp39-cp39-win_amd64.whl</code><br><code>pip install D:\whl\torchaudio-0.12.0+cu113-cp39-cp39-win_amd64.whl</code><br>在虚拟环境 DL 下执行，安装完毕后，可删除 D:\whl 文件夹</p><h2 id="检验-cuda-是否可用"><a href="#检验-cuda-是否可用" class="headerlink" title="检验 cuda 是否可用"></a>检验 cuda 是否可用</h2><p>方法一：查看当前环境的所有库<br>进入 DL 环境后，使用 conda list 命令列出当前的所有库<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-19-32.png" alt="Snipaste_2023-09-02_15-19-32"><br>方法二：进入 Python 解释器检验<br>进入虚拟环境 DL 后，输入 python 以进入解释器，输入 <code>import torch </code>导入 torch 库,若安装成功，不会返回任何语句，同时在下一行出现“&gt;&gt;&gt;”，提示我们可以继续敲代码<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-21-40.png" alt="Snipaste_2023-09-02_15-21-40"><br>最后一步，输入<code> torch.cuda.is_available()</code>，显示true<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-22-48.png" alt="Snipaste_2023-09-02_15-22-48"></p><h1 id="Jupyter代码编辑器"><a href="#Jupyter代码编辑器" class="headerlink" title="Jupyter代码编辑器"></a>Jupyter代码编辑器</h1><h2 id="修改工作路径"><a href="#修改工作路径" class="headerlink" title="修改工作路径"></a>修改工作路径</h2><p>Jupyter 初始的工作路径为【C:\Users\用户名】，需要进行修正，将其转移到新建的【D:\Jupyter】位置</p><ol><li>新建 D:\Jupyter</li><li>打开桌面快捷方式中的 Prompt</li><li>输入 jupyter notebook –generate-config 命令并执行</li><li>打开上一步生成的配置文件地址，即【C:\Users\用户名.jupyter】</li><li>在 jupyter_notebook_config.py（以记事本方式打开）中使用 Ctrl + F 查找并且修改如下配置项：<br>修改前：<code># c.NotebookApp.notebook_dir = &#39;&#39;</code><br>修改后：<code>c.NotebookApp.notebook_dir = &#39;D:\Jupyter&#39;</code></li><li>找到桌面的 jupyter notebook 快捷图标，鼠标反键&gt;&gt;属性&gt;&gt;快捷方式&gt;&gt;目标，删除最后的”%USERPROFILE%&#x2F;“</li></ol><h2 id="修改默认字体（可选"><a href="#修改默认字体（可选" class="headerlink" title="修改默认字体（可选"></a>修改默认字体（可选</h2><ol><li>打开如下地址<code>D:\Anaconda\Lib\site-packages\notebook\static\components\codemirror\lib</code></li><li>打开 codemirror.css 文件</li><li>Ctrl+F，搜索“font-family: monospace;”的文字，并将其改为 <code>font-family: &#39;Fira Code Light&#39;,&#39;Consolas&#39;</code></li></ol><h2 id="虚拟环境连接jupyter"><a href="#虚拟环境连接jupyter" class="headerlink" title="虚拟环境连接jupyter"></a>虚拟环境连接jupyter</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 ipykernel</span></span><br><span class="line">pip install ipykernel -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 将虚拟环境导入 Jupyter 的 kernel 中</span></span><br><span class="line">python -m ipykernel install --user --name=环境名</span><br><span class="line"><span class="comment"># 删除虚拟环境的 kernel 内核</span></span><br><span class="line">jupyter kernelspec remove 环境名</span><br></pre></td></tr></table></figure><p>在 Jupyter 里，切换到 DL 内核后，点击 New，新建一个 DL 内核的脚本<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-42-40.png" alt="Snipaste_2023-09-02_15-42-40"></p><h1 id="Pycharm代码编辑器"><a href="#Pycharm代码编辑器" class="headerlink" title="Pycharm代码编辑器"></a>Pycharm代码编辑器</h1><h2 id="卸载pycharm（可选"><a href="#卸载pycharm（可选" class="headerlink" title="卸载pycharm（可选"></a>卸载pycharm（可选</h2><p>在“PyCharm 安装地址\PyCharm Community Edition 2020.1.3\bin”中，找到Uninstall.exe<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-44-29.png" alt="Snipaste_2023-09-02_15-44-29"><br>双击运行，勾选两个，点击确定<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-46-11.png" alt="Snipaste_2023-09-02_15-46-11"></p><h2 id="安装pycharm"><a href="#安装pycharm" class="headerlink" title="安装pycharm"></a>安装pycharm</h2><p>jetbrains 公司的官网下载 PyCharm，地址为<a href="https://www.jetbrains.com/pycharm/download/other.html">https://www.jetbrains.com/pycharm/download/other.html</a><br>下载社区版（足够个人使用）的 <strong>2020.1.3-win</strong> 版本<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-48-16.png" alt="Snipaste_2023-09-02_15-48-16"><br>安装时，放在 D 盘的新建文件夹：D:\PyCharm 里<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_15-54-40.png" alt="Snipaste_2023-09-02_15-54-40"></p><h2 id="设置Pycharm"><a href="#设置Pycharm" class="headerlink" title="设置Pycharm"></a>设置Pycharm</h2><p>第一个岔路，选择第二个<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-12-55.png" alt="Snipaste_2023-09-02_16-12-55"><br>第二个岔路，选择主题，黑色或亮色<br>最后一个配置，点左下角的按钮跳过即可</p><h2 id="虚拟环境连接Pycharm"><a href="#虚拟环境连接Pycharm" class="headerlink" title="虚拟环境连接Pycharm"></a>虚拟环境连接Pycharm</h2><p>完成第一次配置后，首先在 D:\PyCharm 中创建文件夹 Py_Projects 存放工程，接着，在 PyCharm 里创建新工程<br>第一步，切换新工程的位置为刚刚创建的文件夹；第二步，点击“Existing interpreter”；第三步，由于是第一次进入 PyCharm，只能点击“…”来找解释器<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-41-36.png" alt="Snipaste_2023-09-02_16-41-36"><br>在弹出的界面中，首先点击左侧的 conda 环境，再将解释器设置为 Anaconda虚拟环境解释器的地址<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-42-07.png" alt="Snipaste_2023-09-02_16-42-07"><br>第一次进入工程页面，连接 Anaconda 需要很长一段时间（15 分钟是有的），点击右下角蓝色小圈圈可查看进度<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-43-02.png" alt="Snipaste_2023-09-02_16-43-02"><br>更新好之后，我们可以把 PyCharm 设置为中文。File——Settings——Plugins——在搜索框输入 Chinese——安装第二个<br><img src="/../images/Anaconda-Pytorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Snipaste_2023-09-02_16-43-57.png" alt="Snipaste_2023-09-02_16-43-57"><br>下载好后，点击 Restart IDE，即重启 PyCharm，重启后，会发现软件已经变成了简体中文，但要第二次更新配置，但这一次更新速度会极快</p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annaconda </tag>
            
            <tag> Pytorch </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客部署教程</title>
      <link href="/2023/04/24/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/24/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>hexo new  “博客名” #新建文章</p><p>hexo c #清理残余<br>hexo g #生成<br>hexo s #预览<br>hexo d #部署</p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>编辑器：typora</p><p>每次直接拷贝到文章的截图将会被自动保存到同名的文件夹下</p><p><img src="/../images/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/image-20240124150941698.png" alt="image-20240124150941698"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
